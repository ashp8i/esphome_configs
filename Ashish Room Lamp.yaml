# ARLEC Grid Connect GLD110HA Globe with CW and WW
# -----------------------
# Brand: Arlec Grid Conenct
# Model: GLD110HA
# Runs Brightness pin and colour temperature pin. Uses TYWE3L wifi module, inbuilt gamma correction, standard ESPhome CWWW platform will not work. 
# To use this YAML template you need to place "CWWWSinglepintempandbrightnessLightOutput.h" into the config/esphome/ directory.
# Tasmota Template: {"NAME":"Arlec CCT","GPIO":[0,0,0,0,0,37,0,0,0,38,0,0,0],"FLAG":0,"BASE":48}
# Take special note at Line 24 to ensure your ok with this, if not comment it out and uncomment line 59.





substitutions:
# ESPHome nodename
  devicename: ashishroomlamp
# A prettier name
  upper_devicename: Ashish Room Lamp
  frequency_rgb: 250 Hz
  
esphome:
    name: $devicename
    platform: ESP8266
    board: esp01_1m
    includes:
#    - CWWWSinglepintempandbrightnessLightOutput.h
     - bpa800.h

wifi:
    ssid: !secret wifi_1st_ssid
    password: !secret wifi_1st_password

    # Enable fallback hotspot (captive portal) in case wifi connection fails
    ap:
      ssid:  "Ashish Room Lamp"
      password: !secret ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  password: !secret ota_password

web_server:
  port: 80

output:
- platform: esp8266_pwm
  id: output_red
  pin: GPIO4
  max_power: 100%
  frequency: ${frequency_rgb}
- platform: esp8266_pwm
  id: output_green
  pin: GPIO12
  max_power: 100%
  frequency: ${frequency_rgb}
- platform: esp8266_pwm
  id: output_blue
  pin: GPIO14
  max_power: 100%
  frequency: ${frequency_rgb}
- platform: esp8266_pwm
  id: output_brightness
  max_power: 100%
  pin: GPIO5
- platform: esp8266_pwm
  id: output_color_temp
  pin: GPIO13
  max_power: 100%
  inverted: true

#light:
#- platform: custom
#  lambda: |-
#    auto light_out = new CWWWSinglepintempandbrightnessLightOutput(id(output_brightness), id(output_color_temp));
#    App.register_component(light_out);
#    return {light_out};
#  lights:
#    - name: $upper_devicename
#- platform: rgb
#  name: "Ashish Room Lamp RGB"
#  red: output_red
#  green: output_green
#  blue: output_blue
#  default_transition_length: 0.5s
#  restore_mode: RESTORE_DEFAULT_OFF

light:
  - platform: custom
    lambda: |-
      auto light_out = new BPA800_P(id(output_red), id(output_green), id(output_blue), id(output_brightness), id(output_color_temp));
      App.register_component(light_out);
      return {light_out};
    lights:
      - name: "Ashish Room Lamp"
        restore_mode: RESTORE_DEFAULT_OFF

#  light:
#    - platform: custom 
#      lambda: |- 
#        auto light_out = new XiaomiLight(id(out_cw),id(out_b)); 
#        App.register_component(light_out); 
#        return {light_out}; 
#      lights: 
#        - name: $hostname smart light
#          gamma_correct: 0

#light:
#  - platform: custom
#    lambda: |-
#      auto light_out = new BetterRGBWLightOutput(id(red), id(green), id(blue), id(cold_white), id(warm_white));
#      App.register_component(light_out);
#      return {light_out};
#    lights:
#      - name: $display_name

#effects:
#      # Use default parameters:
#      - random:
#      # Customize parameters
#      - random:
#          name: "My Slow Random Effect"
#          transition_length: 30s
#          update_interval: 30s
#      - random:
#          name: "My Fast Random Effect"
#          transition_length: 4s
#          update_interval: 5s

#- strobe:
#      - strobe:
#          name: Strobe Effect With Custom Values
#          colors:
#            - state: True
#              brightness: 100%
#              red: 100%
#              green: 90%
#              blue: 0%
#              duration: 500ms
#            - state: False
#              duration: 250ms
#            - state: True
#              brightness: 100%
#              red: 0%
#              green: 100%
#              blue: 0%
#              duration: 500ms

#- flicker:
#          name: Flicker Effect With Custom Values
#          alpha: 95%
#          intensity: 1.5%

#- lambda:
#          name: My Custom Effect
#          update_interval: 1s
#          lambda: |-
#            static int state = 0;
#            auto call = id(my_light).turn_on();
#            // Transtion of 1000ms = 1s
#            call.set_transition_length(1000);
#            if (state == 0) {
#              call.set_rgb(1.0, 1.0, 1.0);
#            } else if (state == 1) {
#              call.set_rgb(1.0, 0.0, 1.0);
#            } else if (state == 2) {
#              call.set_rgb(0.0, 0.0, 1.0);
#            } else {
#              call.set_rgb(1.0, 0.0, 0.0);
#            }
#            call.perform();
#            state += 1;
#            if (state == 4)
#              state = 0;

#- automation:
#        name: Custom Automation Effect
#        sequence:
#          - light.addressable_set:
#              id: my_light
#              red: 100%
#              green: 100%
#              blue: 100%
#          - delay: 100ms
#          - light.addressable_set:
#              id: my_light
#              range_from: 0
#              range_to: 20
#              red: 100%
#              green: 0%
#              blue: 0%